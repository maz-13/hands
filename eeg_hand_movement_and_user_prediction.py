# -*- coding: utf-8 -*-
"""EEG Hand Movement and User Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sG5COEoQ9UzHdKWqlkNF2oZSy4Qiu3Is
"""

#Import libraries
import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

import tensorflow as tf

#Load the dataset
#from google.colab import files
#uploaded = files.upload()
dfs = [pd.read_csv('user_'+ user +'.csv') for user in ['a','b','c','d']]

#Adds a column to the dfs to indentify the user
for i in range (len(dfs)):
  dfs[i]['User'] = pd.Series(i, index=dfs[i].index)

#Concat all the dfs into a single df, shuffle the data, and reset index
#axis 0 is the row (y) axis. This ensures that they are stacked on top of each other rather than side by side
data = pd.concat(dfs, axis=0).sample(frac=1.0, random_state=123).reset_index(drop=True)
data

"""Helper Functions"""

def onehot_encode(df, column):
  df = df.copy()
  dummies = pd.get_dummies(df[column], prefix=column)
  df = pd.concat([df, dummies], axis=1)
  df = df.drop(column, axis = 1)
  return df

def preprocess_inputs(df, target='Class'):
    df = df.copy()
    
    # One-hot encode whichever target column is not being used
    targets = ['Class', 'User']
    targets.remove(target)
    df = onehot_encode(df, column=targets[0])
    
    # Split df into X and y
    y = df[target].copy()
    X = df.drop(target, axis=1)
    
    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)
    
    # Scale X with a standard scaler
    scaler = StandardScaler()
    scaler.fit(X_train)
    
    X_train = pd.DataFrame(scaler.transform(X_train), columns=X.columns)
    X_test = pd.DataFrame(scaler.transform(X_test), columns=X.columns)
    
    return X_train, X_test, y_train, y_test

def build_model(num_classes=3):
  inputs = tf.keras.Input(shape=(X_train.shape[1],))
  x = tf.keras.layers.Dense(128, activation='relu')(inputs)
  x = tf.keras.layers.Dense(128, activation='relu')(x)
  outputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x)

  model = tf.keras.Model(inputs=inputs, outputs=outputs)

  model.compile(
      optimizer = 'adam',
      loss='sparse_categorical_crossentropy',
      metrics = ['accuracy']
  )

  return model

"""Predecting Hand Movement Class"""

X_train, X_test, y_train, y_test = preprocess_inputs(data, target='Class')

class_model = build_model(num_classes=3)

class_history = class_model.fit(
    X_train,
    y_train,
    validation_split=0.2,
    batch_size=32,
    epochs=50,
    callbacks=[
               tf.keras.callbacks.EarlyStopping(
                   monitor='val_loss',
                   patience=3,
                   restore_best_weights = True
               )
    ]
)

class_acc = class_model.evaluate(X_test, y_test, verbose=0)[1]
print('Test Accuracy (Class Model): {:.2f}%'.format(class_acc * 100))

"""Predecting User"""

X_train, X_test, y_train, y_test = preprocess_inputs(data, target='User')

user_model = build_model(num_classes=4)

user_history = user_model.fit(
    X_train,
    y_train,
    validation_split=0.2,
    batch_size=32,
    epochs=50,
    callbacks=[
               tf.keras.callbacks.EarlyStopping(
                   monitor='val_loss',
                   patience=3,
                   restore_best_weights = True
               )
    ]
)

user_acc = user_model.evaluate(X_test, y_test, verbose=0)[1]
print('Test Accuracy (User Model): {:.2f}%'.format(user_acc * 100))